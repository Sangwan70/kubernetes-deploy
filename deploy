#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/src/common.bash"

ensure_environment_url
ensure_deploy_variables
create_kubeconfig
ensure_namespace
install_tiller

kubectl create secret -n $KUBE_NAMESPACE \
  docker-registry gitlab-registry \
  --docker-server="$CI_REGISTRY" \
  --docker-username="$CI_REGISTRY_USER" \
  --docker-password="$CI_REGISTRY_PASSWORD" \
  --docker-email="$GITLAB_USER_EMAIL" \
  -o yaml --dry-run | kubectl replace -n $KUBE_NAMESPACE --force -f -

track="${1-stable}"
name="$CI_ENVIRONMENT_SLUG"

replicas="1"

env_track="${track^^}"
env_slug="${CI_ENVIRONMENT_SLUG//-/_}"
env_slug="${env_slug^^}"

if [[ "$track" == "stable" ]]; then
  # for stable track get number of replicas from `PRODUCTION_REPLICAS`
  eval new_replicas=\$${env_slug}_REPLICAS
  if [[ -n "$new_replicas" ]]; then
    replicas="$new_replicas"
  fi
else
  # for all tracks get number of replicas from `CANARY_PRODUCTION_REPLICAS`
  eval new_replicas=\$${env_track}_${env_slug}_REPLICAS
  if [[ -n "$new_replicas" ]]; then
    replicas="$new_replicas"
  fi
fi

if [[ -d chart/Chart.yaml ]]; then
  echo "Using project-provided Chart.yaml..."
  cd chart/
else
  echo "Using Auto Deploy Chart..."
  cd "$DEPLOY_ROOT_DIR/chart/"
fi

echo "Downloading dependencies..."
helm dependency build .
echo ""

POSTGRES_ENABLED="false"

if [[ -z "$DISABLE_POSTGRES" ]]; then
  echo "Configuring database..."
  POSTGRES_USER="${POSTGRES_USER:-user}"
  POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-password}"
  POSTGRES_DB="${POSTGRES_DB:-$env_slug}"
  POSTGRES_ENABLED="true"

  DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CI_ENVIRONMENT_SLUG}-postgres:5432/$POSTGRES_DB/"
fi

set -x
echo "Deploying $CI_ENVIRONMENT_SLUG (track: $track, replicas: $replicas) with $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG..."
if [[ "$track" == "stable" ]]; then
  helm upgrade --install \
    --wait \
    --set image.repository="$CI_REGISTRY_IMAGE" \
    --set image.tag="$CI_REGISTRY_TAG" \
    --set application.track="$track" \
    --set application.postgresDatabase="${DATABASE_URL}" \
    --set service.url="$CI_ENVIRONMENT_URL" \
    --set replicaCount="$replicas" \
    --set postgresql.enabled="$POSTGRES_ENABLED" \
    --set postgresql.nameOverride="postgres" \
    --set postgresql.postgresUser="$POSTGRES_USER" \
    --set postgresql.postgresPassword="$POSTGRES_PASSWORD" \
    --set postgresql.postgresDatabase="$POSTGRES_DB" \
    --namespace="$KUBE_NAMESPACE" \
    --version="$CI_PIPELINE_ID-$CI_BUILD_ID" \
    "$CI_ENVIRONMENT_SLUG" \
    .
else
  helm upgrade --install \
    --wait \
    --set releaseOverride="$CI_ENVIRONMENT_SLUG" \
    --set image.repository="$CI_REGISTRY_IMAGE" \
    --set image.tag="$CI_REGISTRY_TAG" \
    --set application.track="$track" \
    --set application.postgresDatabase="${DATABASE_URL}" \
    --set replicaCount="$replicas" \
    --set service.enabled="false" \
    --set service.url="$CI_ENVIRONMENT_URL" \
    --set postgresql.enabled="false" \
    --namespace="$KUBE_NAMESPACE" \
    --version="$CI_PIPELINE_ID-$CI_BUILD_ID" \
    "$CI_ENVIRONMENT_SLUG-$track" \
    .
fi

echo ""

if [[ "$track" == "stable" ]]; then
  echo "Removing canary deployments (if found)..."
  helm delete "$CI_ENVIRONMENT_SLUG-canary" || true
fi
